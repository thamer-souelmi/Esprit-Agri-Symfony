security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: plaintext
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: mail
        users_in_database:
            entity:
                class: App\Entity\User
                property: mail
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\UserAuthenticator
            custom_authenticators:
                        - App\Security\UserAuthenticator
                        - App\Security\GoogleAuthenticator
            logout:
                path: app_logout
                target: app_login
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true
            two_factor:
                auth_form_path: 2fa_login    # The route name you have used in the routes.yaml
                check_path: 2fa_login_check  # The route name you have used in the routes.yaml
           
        
            
        

            
                

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin, roles: 'admin' }
        - { path: ^/agriculteur, roles: 'agriculteur' }
        - { path: ^/user, roles: 'IS_AUTHENTICATED_FULLY' }
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }    
    
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_AGRICULTEUR: ROLE_USER

when@test:
    security:
        password_hashers:
        App\Entity\User:
            algorithm: plaintext
